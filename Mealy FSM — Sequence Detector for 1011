// mealy_fsm.v
module mealy_fsm(
    input clk,
    input reset,
    input in,
    output reg out
);

    typedef enum reg [2:0] {
        S0 = 3'b000,
        S1 = 3'b001,
        S2 = 3'b010,
        S3 = 3'b011
    } state_t;

    state_t state, next_state;

    // State register
    always @(posedge clk or posedge reset) begin
        if (reset)
            state <= S0;
        else
            state <= next_state;
    end

    // Next state and output logic â€” Mealy: depends on state & input
    always @(*) begin
        out = 0;
        case (state)
            S0: begin
                next_state = in ? S1 : S0;
            end
            S1: begin
                next_state = in ? S1 : S2;
            end
            S2: begin
                next_state = in ? S3 : S0;
            end
            S3: begin
                if (in) begin
                    out = 1; // Sequence detected
                    next_state = S1;
                end else
                    next_state = S2;
            end
            default: next_state = S0;
        endcase
    end

endmodule
